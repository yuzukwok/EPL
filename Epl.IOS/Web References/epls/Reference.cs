// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Epl.IOS.epls {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="http", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnjoyPubLibService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SubmitMonitorWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserNotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookISBNListOperationCompleted;
        
        public EnjoyPubLibService() {
            this.Url = "http://115.29.166.9:8733/MonitorBk/EnjoyPubLibService/v1";
        }
        
        public EnjoyPubLibService(string url) {
            this.Url = url;
        }
        
        public event SubmitMonitorWorkCompletedEventHandler SubmitMonitorWorkCompleted;
        
        public event UpdateUserNotifyCompletedEventHandler UpdateUserNotifyCompleted;
        
        public event GetBookISBNListCompletedEventHandler GetBookISBNListCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEnjoyPubLibService/SubmitMonitorWork", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SubmitMonitorWork([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dtk, [System.Xml.Serialization.XmlArray(IsNullable=true)] [System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] bookisbn, [System.Xml.Serialization.XmlArray(IsNullable=true)] [System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] booknames) {
            this.Invoke("SubmitMonitorWork", new object[] {
                        dtk,
                        bookisbn,
                        booknames});
        }
        
        public System.IAsyncResult BeginSubmitMonitorWork(string dtk, string[] bookisbn, string[] booknames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubmitMonitorWork", new object[] {
                        dtk,
                        bookisbn,
                        booknames}, callback, asyncState);
        }
        
        public void EndSubmitMonitorWork(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SubmitMonitorWorkAsync(string dtk, string[] bookisbn, string[] booknames) {
            this.SubmitMonitorWorkAsync(dtk, bookisbn, booknames, null);
        }
        
        public void SubmitMonitorWorkAsync(string dtk, string[] bookisbn, string[] booknames, object userState) {
            if ((this.SubmitMonitorWorkOperationCompleted == null)) {
                this.SubmitMonitorWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitMonitorWorkCompleted);
            }
            this.InvokeAsync("SubmitMonitorWork", new object[] {
                        dtk,
                        bookisbn,
                        booknames}, this.SubmitMonitorWorkOperationCompleted, userState);
        }
        
        private void OnSubmitMonitorWorkCompleted(object arg) {
            if ((this.SubmitMonitorWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitMonitorWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEnjoyPubLibService/UpdateUserNotify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void UpdateUserNotify([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dtk, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string oldtk, bool appectnews) {
            this.Invoke("UpdateUserNotify", new object[] {
                        dtk,
                        oldtk,
                        appectnews});
        }
        
        public System.IAsyncResult BeginUpdateUserNotify(string dtk, string oldtk, bool appectnews, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateUserNotify", new object[] {
                        dtk,
                        oldtk,
                        appectnews}, callback, asyncState);
        }
        
        public void EndUpdateUserNotify(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void UpdateUserNotifyAsync(string dtk, string oldtk, bool appectnews) {
            this.UpdateUserNotifyAsync(dtk, oldtk, appectnews, null);
        }
        
        public void UpdateUserNotifyAsync(string dtk, string oldtk, bool appectnews, object userState) {
            if ((this.UpdateUserNotifyOperationCompleted == null)) {
                this.UpdateUserNotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserNotifyCompleted);
            }
            this.InvokeAsync("UpdateUserNotify", new object[] {
                        dtk,
                        oldtk,
                        appectnews}, this.UpdateUserNotifyOperationCompleted, userState);
        }
        
        private void OnUpdateUserNotifyCompleted(object arg) {
            if ((this.UpdateUserNotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserNotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEnjoyPubLibService/GetBookISBNList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItem(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] GetBookISBNList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string passkey) {
            object[] results = this.Invoke("GetBookISBNList", new object[] {
                        passkey});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetBookISBNList(string passkey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBookISBNList", new object[] {
                        passkey}, callback, asyncState);
        }
        
        public string[] EndGetBookISBNList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void GetBookISBNListAsync(string passkey) {
            this.GetBookISBNListAsync(passkey, null);
        }
        
        public void GetBookISBNListAsync(string passkey, object userState) {
            if ((this.GetBookISBNListOperationCompleted == null)) {
                this.GetBookISBNListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookISBNListCompleted);
            }
            this.InvokeAsync("GetBookISBNList", new object[] {
                        passkey}, this.GetBookISBNListOperationCompleted, userState);
        }
        
        private void OnGetBookISBNListCompleted(object arg) {
            if ((this.GetBookISBNListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookISBNListCompleted(this, new GetBookISBNListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public delegate void SubmitMonitorWorkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void UpdateUserNotifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class GetBookISBNListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookISBNListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetBookISBNListCompletedEventHandler(object sender, GetBookISBNListCompletedEventArgs args);
}
